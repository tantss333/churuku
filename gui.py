import json
import os.path
import re, threading

import pandas as pd
import PySimpleGUI as sg

from operator import contains
from tkinter import filedialog
from datetime import datetime, timedelta

import subwin, toExcel


pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)


sg.theme('SystemDefaultForReal')

heading = ['工单日期', '料号', '数量', '开始时间', '结束时间', '特殊备注SMT', '特殊备注DIP', '特殊备注整机',
               '焊接模式', 'BOM版本', '系列', '配置号',
               '钢网', 'NK', 'NK日期', '三方需求', '裸板']

def read_file(excel_file, sheet_name, columns, path_name=''):


    if path_name == 'BOM-path':
        txt = 'BOM版本管理表'
    elif path_name == 'electronic-path':
        txt = '配置表'
    else:
        txt = '电路工艺管理表'

    try:
        df = pd.read_excel(excel_file, sheet_name=sheet_name, dtype=str)
        df.columns = columns
        # df.fillna(method='ffill', inplace=True)
        df.fillna('', inplace=True)

    except Exception as e:
        sg.Popup('ERROR 无法解析当前配置文件，[%s]请确保文件内容格式正确无误。\n\n%s'%(txt,e))
        return

    return df

def record_error(id, msg, savefolder):

    txt = '%s 记录数据:%s  报错原因：%s\n'%(datetime.now(), id,  msg)

    try:
        with open('%s/报错信息.txt'%savefolder,'a', encoding='utf-8') as file:
            file.write(txt)
            file.close()
    except Exception as e:
        sg.Popup('ERROR 无法保存错误信息，原因：%s'%e)


def edit_cell(window, key, row, col, justify='left'):

    global textvariable, edit

    def callback(event, row, col, text, key):
        global edit
        # event.widget gives you the same entry widget we created earlier
        widget = event.widget
        if key in ['Focus_Out','Return']:
            # Get new text that has been typed into widget
            text = widget.get()
            # Print to terminal
            print(f'row:{row}, col:{col}, text:{text}')
            table_value[row-1][col] = text

        # Destroy the entry widget
        widget.destroy()
        # Destroy all widgets
        widget.master.destroy()
        # Get the row from the table that was edited
        # table variable exists here because it was called before the callback
        values = list(table.item(row, 'values'))
        # Store new value in the appropriate row and column
        values[col] = text
        table.item(row, values=values)
        edit = False

    if edit or row <= 0:

        return

    edit = True
    # Get the Tkinter functionality for our window
    root = window.TKroot
    # Gets the Widget object from the PySimpleGUI table - a PySimpleGUI table is really
    # what's called a TreeView widget in TKinter
    table = window[key].Widget
    # Get the row as a dict using .item function and get individual value using [col]
    # Get currently selected value
    text = table.item(row, "values")[col]
    # Return x and y position of cell as well as width and height (in TreeView widget)
    x, y, width, height = table.bbox(row, col)

    # Create a new container that acts as container for the editable text input widget
    frame = sg.tk.Frame(root)
    # put frame in same location as selected cell
    frame.place(x=x, y=y, anchor="nw", width=width, height=height)

    # textvariable represents a text value
    textvariable = sg.tk.StringVar()
    textvariable.set(text)
    # Used to acceot single line text input from user - editable text input
    # frame is the parent window, textvariable is the initial value, justify is the position
    entry = sg.tk.Entry(frame, textvariable=textvariable, justify=justify)
    # Organizes widgets into blocks before putting them into the parent
    entry.pack()
    # selects all text in the entry input widget
    entry.select_range(0, sg.tk.END)
    # Puts cursor at end of input text
    entry.icursor(sg.tk.END)
    # Forces focus on the entry widget (actually when the user clicks because this initiates all this Tkinter stuff, e
    # ending with a focus on what has been created)
    entry.focus_force()
    # When you click outside of the selected widget, everything is returned back to normal
    # lambda e generates an empty function, which is turned into an event function
    # which corresponds to the "FocusOut" (clicking outside of the cell) event
    entry.bind("<FocusOut>", lambda e, r=row, c=col, t=text, k='Focus_Out':callback(e, r, c, t, k))
    entry.bind("<Return>", lambda e, r=row, c=col, t=text, k='Return':callback(e, r, c, t, k))


def win(operator_multiple=''):

    global new_value, table_value_, edit

    if not os.path.exists('./src'):
        os.mkdir('./src')

    try:
        with open('./src/settings-.json','r', encoding='utf-8') as file:

            settings_json = json.load(file)
            file.close()
    except:

        settings_json = {"electronic-path":'','excel-path':""}

    sg.set_options(font=('黑体',10))

    logo = b''
    titleBarLogo = b'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'

    heading_frame = sg.Frame('', [
        [
            sg.Image(data=logo),
            sg.T('\t'),
         sg.T(' 电路焊接工单录入系统', font=('隶书',18, 'bold'), text_color='#165bbb'),
            sg.T('\t'*2), sg.Button('设置', key='set-config',  size=(10,2))
         ]
    ], border_width=0)

    col1 = sg.Col(
        [

            [sg.T('下发人：', )],
            [sg.T('交付日期：')],
        ],

    )

    col2 = sg.Col(
        [

            [sg.In('', size=(15, 1), key='applicant')],
            [sg.In('', size=(15, 1), key='orderPayDate', tooltip='一般为月份：202407， 202503')],
        ]
    )

    col3 = sg.Col(
        [
            [sg.T('审核人：', ), ],
            [sg.T('电路料号：')],


        ],

    )

    col4 = sg.Col(
        [
            [sg.In('', size=(15, 1), key='auditor')],
            [sg.In('', size=(15, 1), key='materialId')],


        ]
    )

    col5 = sg.Col(
        [

            [sg.T('批准人：', )],
            [sg.T('工单数量：'),],
        ],

    )

    col6 = sg.Col(
        [

            [sg.In('', size=(15, 1), key='approval')],
            [sg.In('', size=(15, 1), key='orderNum')],
        ]
    )


    info_frame = sg.Frame('', [
        [col1, col2, col3, col4, col5, col6],
    ], element_justification='center')



    history_columns = ['料号', '数量', '焊接模式', '裸板', 'BOM版本', '系列', '配置号', '钢网', 'NK', 'NK日期',
                       '三防需求', '工单号', '开始序列号', '结束序列号']

    table = sg.Table(
        values=[[]],
        headings=history_columns,
        col_widths=[12, 10, 30,30, 30, 10, 10, 30, 30, 15, 10, 10, 30, 30],
        alternating_row_color='#FAEBD7',
        num_rows=20,
        auto_size_columns=False,
        justification='center',
        key='table',
        vertical_scroll_only=False,
        select_mode=sg.TABLE_SELECT_MODE_BROWSE,
    )

    table_ = sg.Table(
        values=[[]],
        headings=heading,
        col_widths=[20]*len(heading),
        alternating_row_color='#FAEBD7',
        num_rows=20,
        auto_size_columns=False,
        justification='center',
        key='-TABLE-',
        vertical_scroll_only=False,
        select_mode=sg.TABLE_SELECT_MODE_BROWSE,
    )


    col1 = sg.Col([
        [sg.T('下单时间：', )],
        [sg.T('焊接模式：'),],
        [sg.T('裸板版本：')],
        [sg.T('BOM版本：')],
    ], pad=(0,0))

    col2 = sg.Col([
        [sg.In(datetime.now().date(), size=(15, 1), key='orderDate', readonly=True)],
        [sg.In('', size=(30, 1), key='method',disabled_readonly_background_color='#AEEEEE',disabled=True,)],
        [sg.In('', size=(30, 1), key='pcb-mode',disabled=True,disabled_readonly_background_color='#AEEEEE')],
        [sg.In('', size=(30, 1), key='bom-mode', disabled=True,disabled_readonly_background_color='#AEEEEE'),],
    ])

    col3 = sg.Col([
        [sg.T('工单编号：')],
        [sg.T('NK版本：')],
        [sg.T('NK日期：')],
        [sg.T('标准品三防：')],
    ], pad=(0,0))

    col4 = sg.Col([
        [sg.In('', size=(30, 1), key='orderId', disabled=True, disabled_readonly_background_color='#AEEEEE')],
        [sg.In('', size=(30, 1), key='NK-mode', disabled=True, disabled_readonly_background_color='#AEEEEE')],
        [sg.In('', size=(30, 1), key='NK-date', disabled=True, disabled_readonly_background_color='#AEEEEE')],
        [sg.In('', size=(30, 1), key='warrant', disabled=True, disabled_readonly_background_color='#AEEEEE')],
    ])

    col5 = sg.Col([
        [sg.T('钢网编号：')],
        [sg.T('工单起始号码：')],
        [sg.T('开始序列号：')],
        [sg.T('结束序列号：')],
    ], pad=(0,0))

    col6 = sg.Col([
        [sg.In(size=(30, 1), key='steelNum', disabled=True, disabled_readonly_background_color='#AEEEEE')],
        [sg.In('', size=(30, 1), key='startOrderNum',disabled=True, disabled_readonly_background_color='#AEEEEE')],
        [sg.In('', size=(30, 1), key='startNum', disabled=True, disabled_readonly_background_color='#AEEEEE')],
        [sg.In('', size=(30, 1), key='endNum', disabled=True, disabled_readonly_background_color='#AEEEEE')],
    ])

    middle_frame1 = sg.Frame('特殊备注SMT', [
        [sg.Multiline('', size=(30, 4), key='SMT')]
    ], border_width=0)

    middle_frame2 = sg.Frame('特殊备注DIP', [
        [sg.Multiline('', size=(30, 4), key='DIP')]
    ], border_width=0)

    middle_frame3 = sg.Frame('特殊备注整机', [
        [sg.Multiline('', size=(30, 4), key='whole')]
    ], border_width=0)

    order_info_frame = sg.Frame('',[
        [col1,col2,col3,col4, col5, col6],
        [middle_frame1, middle_frame2, middle_frame3]
    ], border_width=0, element_justification='center', pad=(0,0))


    bottom_frame = sg.Frame('',[
        [sg.T('提示:'), sg.In('', readonly=True, size=(80, 1), border_width=0, key='status'),
         # sg.Button('导出记录', key='export',size=(10,2))
         ]
    ], border_width=0, element_justification='right')

    titleFrame = sg.Fr('',[
        [sg.T('\t\t\t'),sg.T('【工单名称】', font=('', 12, 'bold'), text_color='#165bbb'),
         sg.In('', size=(60, 1), key='orderName', readonly=True, border_width=0, font=('', 12, 'bold'), text_color='#165bbb')],
    ], element_justification='center', border_width=0)
    layout = [
        [heading_frame],
        [info_frame],
        [titleFrame],
        [table_],
        [order_info_frame],
        [table],
        [bottom_frame]

    ]

    window1 = sg.Window('电路焊接工单录入系统V1.0', layout=layout, finalize=True, element_justification='center', icon=titleBarLogo, size=(1000,700))
    xw = toExcel.Function(window1)

    excelFolder = settings_json['excel-path']
    electronic_path = settings_json['electronic-path']

    window2 = None


    electronic_columns = ['料号','焊接模式','BOM版本','系列','配置号','钢网','NK','NK日期','三防需求','裸板','备用1','备用2','备用3','备用4','备用5']

    df_electronic = read_file(electronic_path, "配置1", electronic_columns, 'electronic-path')
    df_history = read_file(electronic_path, "历史", history_columns, 'electronic-path')


    if df_history is not None:
        table_value = [x for x in df_history.values.tolist()]
    else:
        table_value  = []

    save_folder = './'

    selectList = ['applicant','auditor','approval','orderPayDate', 'materialId',  'orderNum','SMT','DIP','whole']
    update_list = ['orderName', 'orderId', 'applicant', 'auditor', 'approval', 'steelNum', 'startOrderNum']
    for x in selectList:
        window1[x].bind("<Return>","-return-")

    window1['table'].update(values=table_value)
    ##表格数据

    table_value_ = []
    cate, dnum, materialId,pcb = '', '', '',''
    while True:

        window, event, value = sg.read_all_windows()

        if event in [None, sg.WINDOW_CLOSED]:

            if window == window2:
                window2.close()
                quit_signal = 'restart'
                break

            else:
                try:
                    window2.clsoe()
                except:
                    pass

                quit_signal = None

                break

        elif event == 'excelFile':
            window1['status'].update('读取数据中,请稍后......')
            excelFile = value['excelFile']
            open_excelFile = excelFolder + '/%s'%excelFile
            orderDate = value['orderDate']

            xw.stop_app()
            threading.Thread(target=xw.open_excel, args=(open_excelFile, orderDate,), daemon=True).start()

        elif event == 'error':
            sg.Popup(value['error'],keep_on_top=True)

        elif event == 'return-status':
            window1['status'].update(value=value['return-status'])


        elif event == 'return-new-data':
            orderName, orderId, applicant, auditor, approval, steelNum, lastOrderNum, lastOrderId = value['return-new-data']
            
            for y in range(0,len(update_list)):
                window1[update_list[y]].update(value=value['return-new-data'][y])


        elif event in ['pcb','orderId','pcb++Input++','pcb-return-']:
            orderDate = value['orderDate']

            orderId = value['orderId']

            orderName = "{}-{}-{}".format(orderDate.replace('-',''), pcb, orderId)

            window['orderName'].update(value=orderName)

        elif event == 'save':

            excelFolder = value['excel-path']
            # BOM_path = value['BOM-path']
            electronic_path = value['electronic-path']
            # manage_path = value['manage-path']

            settings_json = {"electronic-path":electronic_path,'excel-path':excelFolder}

            with open('./src/settings-.json','w', encoding='utf-8') as file:
                json.dump(settings_json,file, ensure_ascii=False)
                file.close()

            window2.close()

            quit_signal = 'restart'
            break

        elif contains(event,'+INPUT FOCUS+'):
            event_name = re.findall(r'(.*?)\+INPUT FOCUS\+', event)[0]

            window[event_name].update(value='')

            if event_name == 'materialId':
                for x in ['method','pcb-mode','bom-mode', 'NK-mode','NK-date','warrant']:
                    window1[x].update(value='')

        elif contains(event, '-return-'):
            event_name = re.findall(r'(.*?)-return-', event)[0]

            toUpper = value[event_name].upper()
            window1[event_name].update(value=toUpper)
            value[event_name] = toUpper

            if event_name == 'materialId':

                materialId = value['materialId'].strip().upper()
                orderDate = value['orderDate']


                if materialId == '':
                    sg.Popup('请输入【电路料号】', keep_on_top=True)
                    continue

                if df_electronic is None:
                    sg.Popup('未检测到【配置数据表】，无法生成对应信息')
                    record_error('电路料号：%s' % materialId, '未检测到【配置数据表】，无法生成对应信息', save_folder)
                    method, bom_mode, cate, dnum, steelNum, NK, NK_date, warrant, pcb = ['']*9
                    continue
                else:
                    # print(df_bom)
                    df_electronic_search = df_electronic[df_electronic['料号'].str.upper() == materialId]

                    if df_electronic_search.empty:
                        sg.Popup('ERROR 扫描的【电路料号】在【配置数据表】文件中无对应信息', keep_on_top=True)
                        method, bom_mode, cate, dnum, steelNum, NK, NK_date, warrant, pcb = ['']*9
                        continue
                    else:
                        method, bom_mode, cate, dnum, steelNum, NK, NK_date, warrant, pcb = df_electronic_search.loc[:,'焊接模式':'裸板'].values[0]

                        NK_date = str(datetime.strptime(NK_date,'%Y-%m-%d %H:%M:%S').date())

                        if df_history is None:
                            sg.Popup('【配置表】中不存在【历史】sheet，请自行添加正确的格式')
                            continue

                        else:
                            order_search_list = df_history[df_history['裸板']==pcb][['工单号','结束序列号']].values.tolist()

                            if order_search_list == []:
                                orderId = '001'
                                lastOrderNum = 0
                            else:
                                order_search = max(order_search_list,key=lambda x:int(x[0]))

                                lastOrderId, lastOrderNum_str = order_search

                                orderId_int = int(lastOrderId) + 1

                                if len(str(orderId_int)) < 3:

                                    orderId = '0'*(3-len(str(orderId_int))) + str(orderId_int)
                                else:
                                    orderId = str(orderId_int)

                                lastOrderNum_str_r, _ = lastOrderNum_str[::-1].split(' ', 1)
                                try:
                                    lastOrderNum = int(lastOrderNum_str_r[::-1])
                                except Exception as e:
                                    sg.Popup('获取【历史】表单中的结束序列号出错：%s'%e)
                                    continue

                        orderName = "{}-{}-{}".format(orderDate.replace('-', ''), pcb, orderId)
                        window1['orderName'].update(value=orderName)

                        startOrderNum = str(int(lastOrderNum) +1)
                        window1['startOrderNum'].update(startOrderNum)

                window1['orderId'].update(orderId)
                window1['method'].update(method)
                window1['pcb-mode'].update(pcb)
                window1['bom-mode'].update(bom_mode)
                window1['NK-mode'].update(NK)
                window1['NK-date'].update(NK_date)
                window1['warrant'].update(warrant)
                window1['steelNum'].update(steelNum)

            elif event_name in ['orderPayDate','orderNum']:
                orderPayDate = value['orderPayDate']

                orderStartNum = value['startOrderNum']

                try:
                    orderNum = int(value['orderNum'])
                except:
                    orderNum = ''
                    value['orderNum'] = ''


                orderEndNum = '' if orderNum == '' else str(int(orderStartNum) + orderNum)

                orderStartNum_str = '' if len(orderStartNum) == 0 else '0' * (5 - len(orderStartNum)) + orderStartNum
                orderEndNum_str = '' if len(orderEndNum) == 0 else '0' * (5 - len(orderEndNum)) + orderEndNum

                startNum_str = '{}{} {} {} {}'.format(cate, materialId, dnum, orderPayDate, orderStartNum_str)
                endNum_str = '{}{} {} {} {}'.format(cate, materialId, dnum, orderPayDate, orderEndNum_str)

                window1['startNum'].update(value=startNum_str)
                window1['endNum'].update(value=endNum_str)

            elif event_name =='whole':

                whole = value['whole']

                pass_signal = []
                for x in selectList:
                    if value[x] == '':

                        if x in ['SMT','DIP','whole']:
                            pass
                        else:
                            sg.Popup('请补全内容', keep_on_top=True)
                            window1[x].set_focus()
                            pass_signal.append('not')
                            break

                if pass_signal == []:

                    startDate = endDate = str((datetime.strptime(orderDate, '%Y-%m-%d') + timedelta(days=1)).date())

                    orderId = value['orderId']
                    orderName = value['orderName']


                    NK_date = value['NK-date']

                    applicant = value['applicant']
                    auditor = value['auditor']
                    approval = value['approval']
                    SMT = value['SMT']
                    DIP = value['DIP']

                    excelFile = f'{materialId}#{orderName}#{orderNum}.xlsx'

                    targetExcel = excelFolder + '/' + excelFile

                    window1['status'].update('数据保存中......')
                    threading.Thread(target=xw.add_new_sheet, args=(targetExcel, orderDate, orderName, materialId, orderNum,
                                 orderId, method, pcb, startDate, endDate,
                                 startNum_str, endNum_str, warrant, steelNum,
                                 bom_mode, NK, NK_date, applicant, auditor, approval, SMT, DIP, whole,), daemon=True).start()


                    history_columns = ['料号', '数量', '焊接模式', '裸板', 'BOM版本', '系列', '配置号', '钢网', 'NK',
                                       'NK日期', '三防需求', '工单号', '开始序列号', '结束序列号']
                    new_value = [orderDate, orderName, materialId, orderNum,
                                 orderId, method, pcb, startDate, endDate,
                                 startNum_str, endNum_str, warrant, steelNum,
                                 bom_mode, NK, NK_date,applicant, auditor, approval, targetExcel]

                    new_history_value = [materialId, orderNum, method, pcb, bom_mode, cate, dnum, steelNum, NK, NK_date, warrant, orderId, startNum_str, endNum_str]

                    df_history_new = pd.DataFrame(new_history_value).T
                    df_history_new.columns = history_columns


            select_index = selectList.index(event_name)

            if select_index < len(selectList) - 1:

                if value[event_name] == '':
                    if event_name in ['SMT','DIP','whole']:
                        window1[selectList[select_index+1]].set_focus()
                    else:
                        window1[event_name].update('')
                        window1[event_name].set_focus()
                else:
                    window1[selectList[select_index+1]].set_focus()

        elif event == 'succ':
            table_value.insert(0, new_history_value)

            window1['table'].update(values=table_value)

            df_history = df_history_new._append(df_history)
            df_history.reset_index(drop=True, inplace=True)

            Writer = pd.ExcelWriter(electronic_path)

            try:
                df_electronic.to_excel(Writer,sheet_name='配置1', index=False)
                df_history.to_excel(Writer, sheet_name='历史', index=False)

                Writer._save()
                Writer.close()

            except Exception as e:
                sg.Popup('无法保存历史数据：%s'%e)


            window1['orderId'].update(value='')
            window1['orderName'].update(value='')

            for i in ['materialId', 'method', 'pcb-mode', 'bom-mode', 'NK-mode', 'NK-date', 'warrant',
                      'orderNum','SMT','DIP','whole','startNum','endNum']:
                window1[i].update(value='')

            window1['materialId'].set_focus()

        elif event == 'set-config':
            if window2 is not None:
                window2.close()


            window1.close()
            window1 = None
            window2 = subwin.win()
            window2.TKroot.focus_force()
            window2['excel-path'].update(excelFolder)
            window2['electronic-path'].update(electronic_path)


        elif event == 'reset':
            window2['excel-path'].update(value='')
            window2['electronic-path'].update(value='')


        elif contains(event,'-file'):
            path_name = event.replace('-file','-path')

            if path_name == 'excel-path':

                excelFolder = filedialog.askdirectory(initialdir='./')
                if excelFolder == '' or excelFolder is None:
                    continue
                window2[path_name].update(value=excelFolder)

            else:

                excel_file = filedialog.askopenfilename(initialdir='./', filetypes=(('EXCEL', '*.xlsx'),('EXCEL', '*.xlsm'),('EXCEL','*.xls')))
                if excel_file is None or excel_file == '':
                    continue

                if path_name == 'BOM-path':

                    sheet_name = "量产"
                    columns = ['分类','PCB','料号','名称','产线BOM版本','SMT线','启动时间','说明','处理意见']


                elif path_name == 'electronic-path':
                    sheet_name = "配置1"
                    columns = electronic_columns

                else:
                    sheet_name = "电路"

                    columns = ['分类', '料号','裸板型号', '备注', '工具', 'NK版本', 'NK软件', 'NK日期', 'NK构建号', '工装名称',
                               '东莞', '中山', '工装备注', '默认三防']

                df = read_file(excel_file, sheet_name, columns, path_name)
                if df is not None:
                    window2[path_name].update(value=excel_file)

                    if path_name == 'BOM-path':
                        df_bom = df.copy()
                    elif path_name == 'electronic-path':
                        df_electronic = df.copy()
                    else:
                        df_manage = df.copy()

        elif event == 'message':
            window['show'].print(value['message'], font=('',10))


        elif event == 'export':
            if table_value == []:
                sg.Popup('无数据可供导出', keep_on_top=True)
                continue

            df_export = pd.DataFrame(table_value, columns=heading)

            exportFile = filedialog.asksaveasfilename(initialdir='./', filetypes=(('EXCEL','.xlsx'),))
            if exportFile == ''or exportFile is None:
                continue

            if not exportFile.endswith('.xlsx'):
                exportFile = exportFile + '.xlsx'
            try:
                df_export.to_excel(exportFile, engine='openpyxl', index=False)
            except Exception as e:
                sg.Popup('导出失败，原因：%s'%e)
                continue

            history_json = {'data':table_value}
            with open('./src/history.json','w', encoding='utf-8') as history:
                json.dump(history_json, history)
                history.close()
            sg.Popup('SUCCESS 数据导出成功', keep_on_top=True)


    try:
        window1.close()
    except:
        pass


    if quit_signal == 'restart':
        win(operator_multiple)
    else:
        pass

if __name__ == '__main__':
    win()
